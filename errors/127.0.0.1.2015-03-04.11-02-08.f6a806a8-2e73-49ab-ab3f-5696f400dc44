(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> can't assign to conditional expression (graph.py, line 596)"
p3
sS'layer'
p4
S'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*- \nimport urllib\nimport json\nimport dateutil\nimport datetime\nimport string\nimport re\nimport itertools\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom dateutil import parser\nfrom datetime import timedelta\nimport jieba\nimport jieba.analyse\nimport jieba.posseg as pseg\nfrom snownlp import SnowNLP\nfrom snownlp import sentiment\nfrom datetime import timedelta\nfrom operator import itemgetter\nimport codecs\nimport os\n\n#pos_train = os.path.join(request.folder,\'private\',\'dictionary\',\'pos.txt\')\n#nag_train = os.path.join(request.folder,\'private\',\'dictionary\',\'nag.txt\')\n#sentiment.train(pos_train, nag_train)\n\n#sentiment.save(os.path.join(request.folder,\'private\',\'sentiment.marshal\'))\n\ndictionary_path = os.path.join(request.folder,\'private\',\'dictionary\',\'dict.txt.big.txt\')\nuserdict_path = os.path.join(request.folder,\'private\',\'dictionary\',\'userdict.txt\')\nstopwords_path = os.path.join(request.folder,\'private\',\'dictionary\',\'stop_words.txt\')\nidf_path = os.path.join(request.folder,\'private\',\'dictionary\',\'idf.txt.big.txt\')\n\njieba.set_dictionary(dictionary_path)\njieba.load_userdict(userdict_path)\njieba.analyse.set_stop_words(stopwords_path)\njieba.analyse.set_idf_path(idf_path)\n\nstopwords_file = open(stopwords_path, \'r\')\nstopwords = [unicode(line.strip(\'\\n\'), "utf-8") for line in stopwords_file.readlines()]\n\n\n#jieba.initialize()\n\n\ndelEnStr = string.punctuation + \' \' + string.digits\ndelZhStr = u\'\xe3\x80\x8a\xe3\x80\x8b\xef\xbc\x88\xef\xbc\x89&%\xef\xbf\xa5#@\xef\xbc\x81{}\xe3\x80\x90\xe3\x80\x91\xe3\x80\x8c\xe3\x80\x8d\xe3\x80\x8e\xe3\x80\x8f\xef\xbc\x9f\xef\xbd\x9c\xef\xbc\x8c\xe3\x80\x81\xe3\x80\x82\xef\xbc\x9a\xef\xbc\x9b\xe4\xb8\xb6\xef\xbd\x9e\xe3\x80\x80\' + delEnStr.encode(\'utf8\')\n\n\n\ndef getGraph():\n    a_token = auth.settings.login_form.accessToken()\n    #a_token = \'CAAFPZCO9hKHkBADB8BgiU0VnSEUC4FhNfoOh3C9OLRSDkt5XGpLiRDYYwEXcN5tZBDUZBGxqk4jqAwLfYr30Avu7RBdLgxvFY7zw0I3O3PJZA636I8Wd9olsgZBSuRzt90ZCiJKAbeEmzgaMG6mRN6GNPJWqdSFBA5B8M2DRngXQZDZD\'\n    return GraphAPI(a_token)\n\nclass Page:\n\n    def __init__(self, fid):\n        #initiatize the class\n        row = fbdb(fbdb.page.fid == fid).select().first()\n        result = \'\'\n        if not row:\n            result = getPage(fid)\n            row = fbdb(fbdb.page.fid == fid).select().first()\n        self.fid = row.fid\n        self.cover_source = row.cover_source\n        self.picture = row.picture\n        self.link = row.link\n        self.name = row.name\n        self.likes = row.likes\n        self.talking_about_count = row.talking_about_count\n        self.insights = fbdb(fbdb.page_insights.fid == fid).select().as_json()\n        return None\n\n    def updateSocialCount(self): #update every 1 hour\n        #use graphAPI to get the latest page\'s social count\n        result = getPageSocialCount(self.fid)\n        self.likes = result["likes"] if "likes" in result else self.likes\n        self.talkink_about_count = result["talking_about_count"] if "talking_about_count" in result else self.talkink_about_count\n\n    def getPostsFromDB(self, fromdate):\n        fromdate = datetime.datetime.strptime(fromdate, "%Y/%m/%d")\n        posts = fbdb((fbdb.post.status_type != "") & (fbdb.post.from_id == self.fid) & (fbdb.post.created_time >= fromdate)).select().as_list()\n        post_list=[]\n        for post in posts:\n            post_list.append({"fid":post["fid"], "created_time" : post["created_time"] })\n        self.posts= post_list\n\n    def getPostsFromDate(self, fromdate):\n        import time\n        #use graphAPi to get the newest 3 posts\n        from datetime import date\n        fromdate =str(fromdate)\n        since = time.mktime(time.strptime(fromdate, \'%Y/%m/%d\'))-localTz()\n        #fromdate = datetime.datetime.strftime(fromdate, "%Y/%m/%d")\n        #fromdate = datetime.datetime.strptime(fromdate, "%Y/%m/%d")\n        #now = datetime.datetime.today()\n        #days = (now-fromdate).days\n        result = getPostsDate(self.fid, fromdate)\n        posts=result["postsdata"]\n        post_list=[]\n        for post in posts:\n            created_timestamp = time.mktime(time.strptime(post["created_time"], \'%Y-%m-%dT%H:%M:%S+0000\'))\n            if created_timestamp >= since:\n                post_list.append({"fid":post["id"], "created_time" : post["created_time"] })\n        self.posts= post_list\n\n    def updateNewPosts(self): #update every 1 hour\n        #use graphAPi to get the newest 3 posts\n        days = 1\n        result = getPosts(self.fid, days)\n        posts=result["data"]\n        post_list=[]\n        for post in posts:\n            post_list.append({"fid":post["id"], "created_time" : post["created_time"] })\n        self.posts= post_list\n\n    def getPost(self, fid):\n        self.post = Post(fid)\n        return self.post\n\n    def getAllPostsSocialCount(self, start_time_tw ,end_time_tw): #update every 1 hour for last two days\n        end_time_tw = datetime.datetime.strptime(end_time_tw, "%Y/%m/%d")\n        end_time_tw = end_time_tw + timedelta(hours=15)\n        start_time_tw = datetime.datetime.strptime(start_time_tw, "%Y/%m/%d")\n        start_time_tw = start_time_tw + timedelta(hours=15)\n        posts=self.posts\n        from_time_tw = end_time_tw-timedelta(days=1)\n        shares_count_next = 0\n        likes_count_next = 0\n        comment_count_next = 0\n        daily_shares_count = 0\n        daily_likes_count = 0\n        daily_comment_count = 0\n        total_social_count = []\n\n        while from_time_tw >= start_time_tw:\n            row1 = fbdb((fbdb.page_insights.fid == self.fid) & (fbdb.page_insights.end_time == end_time_tw.strftime("%Y-%m-%dT07:00:00+0000"))).select().first()\n            if row1 :\n                shares_count = 0\n                likes_count = 0\n                comment_count = 0\n                from_time_utc = from_time_tw - timedelta(hours=8)\n                end_time_utc = end_time_tw - timedelta(hours=8)\n                for post in posts:\n                    if post["created_time"] <= end_time_utc:\n                        fid = str(post["fid"].split(\'_\')[-1])\n                        #rows = fbdb(fbdb.post_counts.fid == fid).select().last()\n                        row = fbdb((fbdb.post_counts.fid == fid) & (fbdb.post_counts.date_time < end_time_utc) & (fbdb.post_counts.date_time >= from_time_utc)).select().last()\n                        #\n                        if row != None:\n                            shares_count += row.shares_count\n                            likes_count += row.likes_count\n                            comment_count += row.comment_count\n                #return "OK"\n\n                daily_shares_count = shares_count_next - shares_count if shares_count_next !=0 else 0\n                daily_likes_count  = likes_count_next - likes_count if likes_count_next !=0 else 0\n                daily_comment_count = comment_count_next - comment_count if comment_count_next !=0 else 0\n                social_count={"fid": self.fid, "date": end_time_tw.strftime("%Y-%m-%d"), "total_shares_count":shares_count, "total_likes_count": likes_count, "total_comment_count": comment_count, "daily_shares_count":daily_shares_count, "daily_likes_count":daily_likes_count, "daily_comment_count":daily_comment_count, "end_time_utc": end_time_utc, "end_time_tw": end_time_tw, "end_time": end_time_utc.strftime("%Y-%m-%dT07:00:00+0000")}\n                total_social_count.append(social_count)\n\n                row1.update_record(**fbdb.page_insights._filter_fields(social_count))\n\n                shares_count_next = shares_count\n                likes_count_next = likes_count\n                comment_count_next = comment_count\n            end_time_tw -= timedelta(days=1)\n            from_time_tw -= timedelta(days=1)\n\n        self.total_social_count = list(reversed(total_social_count))\n\n    def updateInsightFromDate(self, from_date):\n        #use graphAPI to get the insights info from a given date to now\n        #from_date = datetime.datetime.strptime(date, "%Y/%m/%d")\n        \n        result = getPageInsights(self.fid, from_date)\n        rows = fbdb(fbdb.page_insights.fid == self.fid).select()\n        self.insights = rows.as_json()\n\n    def updateInsight(self): #update everyday\n        #use graphAPI to get the newest insights info within the last day\n        from datetime import timedelta\n        from_date = (datetime.datetime.today()-timedelta(days=1)).strftime("%Y/%m/%d")\n        result = getPageInsights(self.fid, from_date)\n        rows = fbdb(fbdb.page_insights.fid == self.fid).select()\n        self.insights = rows.as_json()\n\n    def getlifetime_insights(self):\n        from collections import deque\n\n        rows = fbdb(fbdb.page_insights.fid == self.fid).select()\n        list1 = []\n        list2 = []\n        list3 = []\n        list4 = []\n        list5 = []\n        list6 = []\n        list7 = []\n        list8 = []\n        list9 = []\n        list10 = []\n        list11 = []\n        list12 = []\n        list13 = []\n        list14 = []\n        list15 = []\n        list16 = []\n        list17 = []\n        list18 = []\n        list19 = []\n        list20 = []\n        list21 = []\n        list22 = []\n        list23 = []\n        list24 = []\n        list25 = []\n        list26 = []\n        list27 = []\n        list28 = []\n        list29 = []\n        list30 = []\n\n\n\n        weekStack = deque([])\n        twoWeekStack = deque([])\n        days28Stack = deque([])\n        sharesStack= deque([])\n        likesStack= deque([])\n        commentStack= deque([])\n\n\n        for row in rows:\n            date = datetime.datetime.strftime(row.end_time_tw, \'%Y%m%d\')\n            lifetime_likes_tw = row["lifetime_likes"].get("TW")\n            daily_people_tw = row["daily_people_talking"].get("TW")\n            weekly_people_tw = row["weekly_people_talking"].get("TW")\n            days28_people_tw = row["days28_people_talking"].get("TW")\n\n            lifetime_likes_global = sum(row["lifetime_likes"].values())\n            daily_people_global = sum(row["daily_people_talking"].values())\n            weekly_people_global = sum(row["weekly_people_talking"].values())\n            days28_people_global = sum(row["days28_people_talking"].values())\n\n            daily_shares_count = row["daily_shares_count"]\n            daily_likes_count = row["daily_likes_count"]\n            daily_comment_count = row["daily_comment_count"]\n            total_shares_count = row["total_shares_count"]\n            total_likes_count = row["total_likes_count"]\n            total_comment_count = row["total_comment_count"]\n\n\n\n            list1.append({"date": date , "number":lifetime_likes_tw})\n            list2.append({"date": date , "number":daily_people_tw})\n            list3.append({"date": date , "number":weekly_people_tw})\n            list4.append({"date": date , "number":days28_people_tw})\n            list12.append({"date": date , "number":daily_shares_count})\n            list13.append({"date": date , "number":daily_likes_count})\n            list14.append({"date": date , "number":daily_comment_count})\n            list15.append({"date": date , "number":total_shares_count})\n            list16.append({"date": date , "number":total_likes_count})\n            list17.append({"date": date , "number":total_comment_count})\n\n            list27.append({"date": date , "number":lifetime_likes_global})\n            list28.append({"date": date , "number":daily_people_global})\n            list29.append({"date": date , "number":weekly_people_global})\n            list30.append({"date": date , "number":days28_people_global})\n\n        self.lifetime_likes_tw = list(reversed(list1))\n        self.daily_people_tw = list(reversed(list2))\n        self.weekly_people_tw = list(reversed(list3))\n        self.days28_people_tw = list(reversed(list4))\n        self.daily_shares_count = list(reversed(list12))\n        self.daily_likes_count = list(reversed(list13))\n        self.daily_comment_count = list(reversed(list14))\n        self.total_shares_count = list(reversed(list15))\n        self.total_likes_count = list(reversed(list16))\n        self.total_comment_count = list(reversed(list17))\n        self.lifetime_likes_global = list(reversed(list27))\n        self.daily_people_global = list(reversed(list28))\n        self.weekly_people_global = list(reversed(list29))\n        self.days28_people_global = list(reversed(list30))\n\n\n\n\n        for lifetime, daily, weekly, days28, share, like, comment  in zip(list1, list2, list3, list4, list15, list16, list17):\n            date = lifetime["date"]\n            weekStack.append(lifetime["number"])\n            days28Stack.append(lifetime["number"])\n            twoWeekStack.append(lifetime["number"])\n            sharesStack.append(share["number"])\n            likesStack.append(like["number"])\n            commentStack.append(comment["number"])\n\n\n            M = len(days28Stack)\n\n\n            if M > 28:\n                days28Stack.popleft()\n                sharesStack.popleft()\n                likesStack.popleft()\n                commentStack.popleft()\n                M = len(days28Stack)\n\n\n            newfansperdays28 = 0 if M < 28 else days28Stack[M-1] - days28Stack[M-28]\n            sharesdays28 = 0 if M < 28 else sharesStack[M-1] - sharesStack[M-28]\n            likesdays28 = 0 if M < 28 else likesStack[M-1] - likesStack[M-28]\n            commentdays28 = 0 if M < 28 else commentStack[M-1] - commentStack[M-28]\n            newfansbiweek = 0 if M < 14 else days28Stack[M-1] - days28Stack[M-14]\n            sharesbiweek = 0 if M < 14 else sharesStack[M-1] - sharesStack[M-14]\n            likesbiweek = 0 if M < 14 else likesStack[M-1] - likesStack[M-14]\n            commentbiweek = 0 if M < 14 else commentStack[M-1] - commentStack[M-14]\n            newfansperweek = 0 if M < 7 else days28Stack[M-1] - days28Stack[M-7]\n            sharesperweek = 0 if M < 14 else sharesStack[M-1] - sharesStack[M-7]\n            likesperweek = 0 if M < 14 else likesStack[M-1] - likesStack[M-7]\n            commentperweek = 0 if M < 14 else commentStack[M-1] - commentStack[M-7]\n            newfansperday = 0 if M < 1 else days28Stack[M-1] - days28Stack[M-2]\n\n\n            daily_discuss_tw = daily["number"] - newfansperday if newfansperday != None else 0\n            weekly_discuss_tw = weekly["number"] - newfansperweek if newfansperweek != None else 0\n            days28_discuss_tw = days28["number"] - newfansperdays28 if newfansperdays28 != None else 0\n\n            list5.append({"date": date , "number":newfansperday})\n            list6.append({"date": date , "number":newfansperweek})\n            list7.append({"date": date , "number":newfansperdays28})\n            list8.append({"date": date , "number":daily_discuss_tw})\n            list9.append({"date": date , "number":weekly_discuss_tw})\n            list10.append({"date": date , "number":days28_discuss_tw})\n            list11.append({"date": date , "number":newfansbiweek})\n            list18.append({"date": date , "number":sharesdays28})\n            list19.append({"date": date , "number":likesdays28})\n            list20.append({"date": date , "number":commentdays28})\n            list21.append({"date": date , "number":sharesbiweek})\n            list22.append({"date": date , "number":likesbiweek})\n            list23.append({"date": date , "number":commentbiweek})\n            list24.append({"date": date , "number":sharesperweek})\n            list25.append({"date": date , "number":likesperweek})\n            list26.append({"date": date , "number":commentperweek})\n\n\n        self.daily_newfan_tw = list5\n        self.weekly_newfan_tw = list6\n        self.days28_newfan_tw = list7\n        self.daily_discuss_tw = list8\n        self.weekly_discuss_tw = list9\n        self.days28_discuss_tw = list10\n        self.biWeekly_newfan_tw = list11\n\n        self.days28_shares_count = list(reversed(list18))\n        self.days28_likes_count = list(reversed(list19))\n        self.days28_comment_count = list(reversed(list20))\n        self.biWeekly_shares_count = list(reversed(list21))\n        self.biWeekly_likes_count = list(reversed(list22))\n        self.biWeekly_comment_count = list(reversed(list23))\n        self.weekly_shares_count = list(reversed(list24))\n        self.weekly_likes_count = list(reversed(list25))\n        self.weekly_comment_count = list(reversed(list26))\n\n\n        return None\n\n    def __str__(self):\n        return \'Page({0}, {1}, {2}, {3})\'.format(self.name, self.fid, self.cover_source, self.link)\n\nclass Post:\n\n    def __init__(self, fid):\n        \'\'\'initiatize the class\'\'\'\n        row = fbdb(fbdb.post.fid == fid).select().first()\n        result = \'\'\n        if not row:\n            result = getPost(fid)\n            delay()\n            row = fbdb(fbdb.post.fid == fid).select().first()\n        self.fid = row.fid\n        self.message = row.message\n        self.likes_count = row.likes_count\n        self.comment_count = row.comment_count\n        self.shares_count = row.shares_count\n        self.ptype = row.ptype\n        self.link = row.link\n        self.created_time = row.created_time\n        self.picture = row.picture\n        self.from_id = row.from_id\n        self.comments_arr=row.comments_arr\n        return None\n\n    def updateSocialCount(self): #update every 1 hour\n        \'\'\'use graphAPI to get the latest post\'s social count\'\'\'\n        result = getPostSocialCount(self.fid)\n        self.likes_count = result["likes_count"] if "likes_count" in result else self.likes\n        self.comment_count = result["comment_count"] if "comment_count" in result else self.talkink_about_count\n        self.shares_count = result["shares_count"] if "shares_count" in result else self.checkins\n\n    def updateComments(self): #update every 1 hour if SocialCount changed\n        \'\'\'use graphAPi to get the newest comments\'\'\'\n        result = getPostComments(self.fid)\n        self.comments_arr=result["comments_arr"]\n        \n    def update_and_convertCommentsDays(self, from_team, from_page, from_post, days): \n        \'\'\'use graphAPi to get the newest comments\'\'\'\n        result = getPostCommentsDays(self.fid, days)\n        self.comments_arr=result["comments_arr"]\n        for comment in self.comments_arr:\n            getComment(comment["id"], from_team, from_page, from_post)\n    \n    def convertComments(self):\n        convertComms(self.fid)\n\n    def getlifetime_insightsDB(self):\n        rows = fbdb(fbdb.post_counts.fid == self.fid.split("_")[-1]).select()\n        list1 = []\n        list2 = []\n        list3 = []\n        list4 = []\n        list5 = []\n        list6 = []\n\n        likesthishour= 0\n        likeslasthour =  0\n        likesperhour = 0\n\n        sharesthishour= 0\n        shareslasthour =  0\n        sharesperhour = 0\n\n        commentthishour= 0\n        commentlasthour =  0\n        commentperhour = 0\n\n        for row in rows:\n            time = datetime.datetime.strftime(row.date_time+ timedelta(hours=7), \'%Y%m%d%H\')\n            list1.append({"time": time , "number":row["shares_count"]})\n            list2.append({"time": time , "number":row["likes_count"]})\n            list3.append({"time": time , "number":row["comment_count"]})\n\n            likesthishour = row["likes_count"]\n            likesperhour = likesthishour - likeslasthour if likeslasthour !=0 else likesthishour\n            likeslasthour = likesthishour\n            list4.append({"time": time , "number":likesperhour})\n\n            sharesthishour = row["shares_count"]\n            sharesperhour = sharesthishour - shareslasthour if shareslasthour !=0 else sharesthishour\n            shareslasthour = sharesthishour\n            list5.append({"time": time , "number":sharesperhour})\n\n            commentthishour = row["comment_count"]\n            commentperhour = commentthishour - commentlasthour if commentlasthour !=0 else commentthishour\n            commentlasthour = commentthishour\n            list6.append({"time": time , "number":commentperhour})\n\n\n        self.lifetime_shares_count = list1\n        self.lifetime_likes_count = list2\n        self.lifetime_comment_count = list3\n        self.lifetime_likesperhour_count = list4\n        self.lifetime_sharesperhour_count = list5\n        self.lifetime_commentperhour_count = list6\n\n        return None\n\n    def __str__(self):\n        return \'Post({0}, {1}, {2}, {3})\'.format(self.fid, self.message, self.from_id, self.link)\n\nclass People:\n\n    def __init__(self, uid):\n        row = fbdb(fbdb.people.uid == uid).select().first()\n        result = \'\'\n        if not row:\n            result = getPeople(uid)\n            row = fbdb(fbdb.people.uid == uid).select().first()\n        if row:\n            self.fid = row.uid if \'uid\' in row else None\n            self.name = row.name if \'name\' in row else None\n            self.gender=row.gender if \'gender\' in row else None\n            self.locale = row.locale if \'locale\' in row else None\n            self.link = row.link if \'link\' in row  else None\n            self.picture = row.picture if \'picture\' in row  else None\n            self.first_name = row.first_name if \'first_name\' in row  else None\n            self.last_name = row.last_name if \'last_name\' in row  else None\n            self.age_range = row.age_range if \'age_range\' in row  else None\n            self.education = row.education if \'education\' in row  else None\n            self.work = row.work if \'work\' in row  else None\n            self.hometown = row.hometown if \'hometown\' in row  else None\n            self.location = row.location if \'location\' in row  else None\n            self.updated_time = row.updated_time if \'updated_time\' in row  else None\n            self.religion = row.religion if \'religion\' in row  else None\n            self.website = row.website if \'website\' in row  else None\n            self.birthday = row.birthday if \'birthday\' in row  else None\n            self.timezone = row.picture if \'timezone\' in row  else None\n            self.email = row.email if \'email\' in row  else None\n        else:\n            self.fid = uid\n            self.name = "Not existing user"\n            self.gender = None\n        return None\n\n    def getPostsFromDB(self, fromdate):\n        fromdate = datetime.datetime.strptime(fromdate, "%Y/%m/%d")\n        posts = fbdb((fbdb.post.status_type != "") & (fbdb.post.from_id == self.fid) & (fbdb.post.created_time >= fromdate)).select().as_list()\n        post_list=[]\n        for post in posts:\n            post_list.append({"fid":post["fid"], "created_time" : post["created_time"] })\n        self.posts= post_list\n\n    #def influence (self):\n        #influence = self.comment_count * 0.5\n        #return influence\n\n    def __str__(self):\n        return\n\nclass News:\n\n    def __init__(self, href):\n        if href != \'\':\n            row = fbdb(fbdb.news.href == href).select().first()\n            if not row:\n                result = get_news(href)\n                row = fbdb(fbdb.news.href == href).select().first()\n            if row:\n                self.fid = row.fid if \'fid\' in row else None\n                self.updated_time = row.updated_time if \'updated_time\' in row else None\n                self.updated_time_tw = row.updated_time if \'updated_time_tw\' in row else None\n                self.created_time = row.updated_time if \'created_time\' in row else None\n                self.created_time_tw = row.updated_time if \'created_time_tw\' in row else None\n                self.share_count = row.share_count if \'share_count\' in row else None\n                self.comment_count = row.comment_count if \'comment_count\' in row else None\n                self.date_time = row.date_time if \'date_time\' in row else None\n                self.source = row.source if \'source\' in row else None\n                self.summary = row.summary if \'summary\' in row else None\n                self.title = row.title if \'title\' in row else None\n                self.href = row.href if \'href\' in row else None\n                self.fb_url = row.fb_url if \'fb_url\' in row else None\n                self.photo = row.photo if \'photo\' in row else None\n                self.related_news = row.related_news if \'related_news\' in row else None\n                self.related_news_date_time = row.related_news_date_time if \'related_news_date_time\' in row else None\n                self.from_team = row.from_team if \'from_team\' in row else None\n                self.related_news_source = row.related_news_source if \'related_news_source\' in row else None\n\n        return None\n\n    def updateSocialCount(self):\n        href = self.href\n        results = getUrlSocialCount(href)\n        self.comment_count = results[\'comment_count\']\n        self.share_count = results[\'share_count\']\n\n    def getCommentsFromDB(self, fromdate):\n        fromdate = datetime.datetime.strptime(fromdate, "%Y/%m/%d")\n        Comments = fbdb((fbdb.news_comments.from_id == self.fid) & (fbdb.news_comments.created_time >= fromdate)).select().as_json()\n        #Comments_list=[]\n        #for Comment in Comments:\n        #    Comments_list.append({"fid":Comment["fid"], "created_time" : Comment["created_time"] })\n        self.Comments = Comments\n\n    def updateNewComments(self):\n        ids = self.fid\n        from_team = self.from_team\n        news_source = self.source\n        href= self.href\n        result = getNewsComments(ids, from_team, news_source, href)\n        Comments = fbdb(fbdb.news_comments.news_fid == self.fid).select().as_json()\n        self.Comments = Comments\n\n    def getComments(self):\n        Comments = fbdb(fbdb.news_comments.from_id == self.fid).select().as_json()\n        self.Comments = Comments\n\n    def convertNewsComms(self):\n        convertNewsComms(self.fid)\n\n    def __str__(self):\n        return\n\nclass NewsGroup:\n    def __init__(self, keyword):\n        self.keyword = keyword\n        self.news_count = fbdb(fbdb.news.from_team == keyword).count()\n        self.url_list = fbdb(fbdb.news.from_team == keyword).select(fbdb.news.fb_url).as_json()\n        return None\n\n    def updateAllSocialCount(self):\n        urls = \'\'\n        for url in self.url_list:\n            if len(urls.split(\',\')) >=50:\n                getGroupUrlsSocialCount(urls)\n                urls = \'\'\n            urls = urls + \',\' + url if len(urls) == 0 else urls = url\n        getGroupUrlsSocialCount(urls)\n\n    def __str__(self):\n        return\n\n@auth.requires_login()\ndef getPage(fid):\n    graph = getGraph()\n    try:\n        row = fbdb(fbdb.page.fid==fid).select().first()\n        if row == None:\n            fb_obj = graph.get_object(fid)\n            name =  fb_obj["name"] if (\'name\' in fb_obj) else None\n            category = fb_obj["category"] if (\'category\' in fb_obj) else None\n            about = fb_obj["about"] if (\'about\' in fb_obj) else None\n            can_post = fb_obj["can_post"] if (\'can_post\' in fb_obj) else None\n            is_published = fb_obj["is_published"] if (\'is_published\' in fb_obj) else None\n            talking_about_count = fb_obj["talking_about_count"] if (\'talking_about_count\' in fb_obj) else None\n            link = fb_obj["link"] if (\'link\' in fb_obj) else None\n            likes = fb_obj["likes"] if (\'likes\' in fb_obj) else None\n            description = fb_obj["description"] if (\'description\' in fb_obj) else None\n            if \'cover\' in fb_obj:\n                cover_id = fb_obj["cover"]["cover_id"] if (\'cover_id\' in fb_obj["cover"]) else None\n                cover_source = fb_obj["cover"]["source"] if (\'source\' in fb_obj["cover"]) else None\n            else:\n                cover_id = \'\'\n                cover_source = \'\'\n            website = fb_obj["website"] if (\'website\' in fb_obj) else None\n            picture = fb_obj["picture"]["data"]["url"] if (\'picture\' in fb_obj) else \'\'\n            if picture <> \'\':\n                picture = picture.replace(\'_s.jpg\',\'_n.jpg\').replace(\'p50x50/\',\'\')\n            fbdb.page.insert(fid=fid, name=name, category=category, about=about, can_post=can_post, is_published=is_published, link=link, description=description, cover_id=cover_id, cover_source=cover_source,website=website, picture=picture, talking_about_count=talking_about_count, likes=likes )\n            fbdb.commit()\n            delay()\n            message=\'Successfully adding new page into the database\'\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n    except:\n        raise\n        message=  "Unexpected error:", sys.exc_info()[0]\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n    return dict(message=message)\n\n@auth.requires_login()\ndef getPageSocialCount(fid):\n    import datetime\n    from datetime import timedelta\n    import time\n    graph = getGraph()\n    try:\n        #pid = checkGraphId(oid) \' Only for Place page\n        fb_obj = graph.request(fid ,args={\'fields\': \'id, name, talking_about_count, picture.type(large), likes\'})\n        likes= fb_obj["likes"] if  (\'likes\' in fb_obj) else 0\n        talking_about_count\t = fb_obj["talking_about_count"] if  (\'talking_about_count\' in fb_obj) else 0\n        updated_time_utc = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #use utcnow for all purposes\n        updated_time_utc = datetime.datetime.strptime(updated_time_utc,\'%Y-%m-%dT%H:%M:%S+0000\')\n        updated_time_tw = updated_time_utc + timedelta(hours=8)\n        cover_id = fb_obj["cover"]["cover_id"] if (\'cover\' in fb_obj) else None\n        source = fb_obj["cover"]["source"] if (\'cover\' in fb_obj) else None\n        picture = fb_obj["picture"]["data"]["url"] if (\'picture\' in fb_obj) else None\n        fbdb.page.update_or_insert(fbdb.page.fid == fid, likes=likes, updated_time_utc=updated_time_utc, updated_time_tw = updated_time_tw, talking_about_count=talking_about_count, cover_id=cover_id, source=source, picture=picture )\n        fbdb.page_social_counts.insert(fid=fid, likes=likes, talking_about_count=talking_about_count, updated_time_utc=updated_time_utc, updated_time_tw=updated_time_tw)\n        fbdb.commit()\n        delay()\n        message=\'Successfully update the PageSocialCount\'\n        return dict(message=message, talking_about_count=talking_about_count, cover_id=cover_id, source=source, picture=picture, updated_time_utc=updated_time_utc, updated_time_tw=updated_time_tw)\n\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message)  #dict(message=str[9])\n\n@auth.requires_login()\ndef getPostsDate(fid, fromdate):\n    import time\n    import datetime\n    since = time.mktime(time.strptime(fromdate, \'%Y/%m/%d\'))-localTz()\n    until  = int(time.time())-localTz()\n    data = []\n    postsdata = []\n\n    try:\n        graph = getGraph()\n        qtext = \'id, from, message, updated_time, created_time, status_type, type, link, name, picture, likes.limit(1).summary(true), shares, comments.limit(1).summary(true), object_id, to, with_tags, story, application, caption, description, icon, is_hidden, message_tags, place\'\n        posts_data=graph.request(fid + \'/posts\', args={\'fields\': qtext, \'until\': until, \'limit\':50 })\n        data = posts_data["data"]\n        delay()\n\n\n        while ((until >= since) and (len(data) <> 0)):\n            postsdata.extend(data)\n            until = int(posts_data["paging"]["next"].split(\'&until=\')[-1].split(\'&\')[0])\n            for post in data:\n                fid = post["id"]\n                message =  unicode(post["message"]) if (\'message\' in post) else None\n                from_id = post["from"]["id"] if (\'from\' in post) else None\n                from_name = post["from"]["name"] if (\'from\' in post) else None\n                #from_picture = post["from"]["picture"]["data"]["url"] if (\'from\' in post) else None\n                created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n                created_timestamp = time.mktime(time.strptime(post["created_time"], \'%Y-%m-%dT%H:%M:%S+0000\'))\n                updated_time = datetime.datetime.strptime(post["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'updated_time\' in post) else None\n                status_type = post["status_type"] if (\'status_type\' in post) else None\n                ptype = post["type"] if (\'type\' in post) else None\n                status_type = post["status_type"] if (\'status_type\' in post) else None\n                link = post["link"] if (\'link\' in post) else None\n                link_name = post["name"] if (\'name\' in post) else None\n                picture = post["picture"] if (\'picture\' in post) else None\n                if picture:\n                    picture = picture.replace(\'_s.jpg\',\'_n.jpg\').replace(\'s130x130/\',\'\')\n                shares_count = post["shares"][\'count\'] if (\'shares\' in post) else 0\n                likes_count = post["likes"]["summary"]["total_count"] if (\'likes\' in post) else 0\n                comment_count = post["comments"]["summary"]["total_count"] if (\'comments\' in post) else 0\n                comments_arr=[]\n                comments_arr = post["comments"][\'data\'] if (\'comments\' in post) else []\n                object_id = post["object_id"] if (\'object_id\' in post) else None\n                to= post["to"] if (\'to\' in post) else None\n                with_tags= post["with_tags"] if (\'with_tags\' in post) else None\n                story= post["story"] if (\'story\' in post) else None\n                application = post["application"] if (\'application\' in post) else None\n                caption = post["caption"] if (\'caption\' in post) else None\n                description= post["description"] if (\'description\' in post) else None\n                icon= post["icon"] if (\'icon\' in post) else None\n                is_hidden = post["is_hidden"] if (\'is_hidden\' in post) else None\n                message_tags= post["message_tags"] if (\'message_tags\' in post) else None\n                if (\'place\' in post):\n                    placeid = post["place"]["id"] if (\'id\' in post["place"]) else None\n                    placename = post["place"]["name"] if (\'name\' in post["place"]) else None\n                    if (\'location\' in post["place"]):\n                        street = post["place"]["location"]["street"] if (\'street\' in post["place"]["location"]) else None\n                        city = post["place"]["location"]["city"] if (\'city\' in post["place"]["location"]) else None\n                        state = post["place"]["location"]["state"] if (\'state\' in post["place"]["location"]) else None\n                        country = post["place"]["location"]["country"] if (\'country\' in post["place"]["location"]) else None\n                        zip = post["place"]["location"]["zip"] if (\'zip\' in post["place"]["location"]) else None\n                        longitude = post["place"]["location"]["longitude"] if (\'longitude\' in post["place"]["location"]) else None\n                        latitude = post["place"]["location"]["latitude"] if (\'latitude\' in post["place"]["location"]) else None\n                    getPlace(placeid)\n                    delay()\n                else:\n                    placeid = None\n                    placename = None\n                    street = None\n                    city = None\n                    state = None\n                    country = None\n                    zip = None\n                    longitude = None\n                    latitude = None\n\n                to= post["to"] if (\'to\' in post) else None\n                with_tags= post["with_tags"] if (\'with_tags\' in post) else None\n\n                row=fbdb(fbdb.page.fid==from_id).select().first()\n                #team = row[\'team\']\n                row = fbdb(fbdb.post.fid==fid).select().first()\n                if created_timestamp >= since:\n                    if row:\n                        row.update_record(message=message, object_id=object_id,ptype=ptype, status_type=status_type, link=link, link_name=link_name, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, updated_time=updated_time,comments_arr=comments_arr, to = to, with_tags = with_tags, story = story, application = application, caption = caption, description = description, icon = icon, is_hidden = is_hidden, message_tags = message_tags, placeid = placeid, placename = placename, street = street, city = city, state = state, country = country, zip = zip, longitude = longitude, latitude = latitude)\n                    else:\n                        fbdb.post.insert(fid=fid, message=message, from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, link_name=link_name, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, updated_time=updated_time,comments_arr=comments_arr, to = to, with_tags = with_tags, story = story, application = application, caption = caption, description = description, icon = icon, is_hidden = is_hidden, message_tags = message_tags, placeid = placeid, placename = placename, street = street, city = city, state = state, country = country, zip = zip, longitude = longitude, latitude = latitude)\n                        fbdb.commit()\n            try:\n                posts_data=graph.request(fid + \'/posts\', args={\'fields\': qtext, \'until\': until, \'limit\':50  })\n                data = posts_data["data"]\n                delay()\n            except:\n                #raise\n                data=[]\n                message=  "Unexpected error:" + fid + \'/posts?until=\' + str(until), sys.exc_info()[0]\n                fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n                fbdb.commit()\n\n        message = \'finished\'\n\n    except GraphAPIError, e:\n        #raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message)\n\n    return dict(message=message, postsdata=postsdata)\n\n@auth.requires_login()\ndef getPostsDays(fid, days):\n    import time\n    import datetime\n    until  = int(time.time())\n    since = until - 86400 * days\n    data = []\n    postsdata = []\n    \n    try:\n        graph = getGraph()\n        qtext = \'id, from, message, updated_time, created_time, status_type, type, link , picture, likes.limit(1).summary(true), shares, comments.limit(1).summary(true), object_id\'\n        posts_data=graph.request(fid + \'/posts\', args={\'fields\': qtext, \'until\': until, \'limit\':50 })\n        data = posts_data["data"]\n        delay()\n\n\n        while until >= since:\n            postsdata.extend(data)\n            until = int(posts_data["paging"]["next"].split(\'&until=\')[-1].split(\'&\')[0])\n            for post in data:\n                fid = post["id"]\n                message =  post["message"] if (\'message\' in post) else None\n                from_id = post["from"]["id"] if (\'from\' in post) else None\n                from_name = post["from"]["name"] if (\'from\' in post) else None\n                #from_picture = post["from"]["picture"]["data"]["url"] if (\'from\' in post) else None\n                created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n                updated_time = datetime.datetime.strptime(post["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'updated_time\' in post) else None\n                status_type = post["status_type"] if (\'status_type\' in post) else None\n                ptype = post["type"] if (\'type\' in post) else None\n                status_type = post["status_type"] if (\'status_type\' in post) else None\n                link = post["link"] if (\'link\' in post) else None\n                picture = post["picture"] if (\'picture\' in post) else None\n                if picture <> \'\':\n                    picture = picture.replace(\'_s.jpg\',\'_n.jpg\').replace(\'s130x130/\',\'\')\n                shares_count = post["shares"][\'count\'] if (\'shares\' in post) else 0\n                likes_count = post["likes"]["summary"]["total_count"] if (\'likes\' in post) else 0\n                comment_count = post["comments"]["summary"]["total_count"] if (\'comments\' in post) else 0\n                comments_arr=[]\n                comments_arr = post["comments"][\'data\'] if (\'comments\' in post) else []\n                object_id = post["object_id"] if (\'object_id\' in post) else None\n\n                row=fbdb(fbdb.page.fid==from_id).select().first()\n                #team = row[\'team\']\n                row = fbdb(fbdb.post.fid==fid).select().first()\n                if row:\n                    row.update_record(message=message, object_id=object_id,ptype=ptype, status_type=status_type, link=link, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, updated_time=updated_time,comments_arr=comments_arr)\n                else:\n                    fbdb.post.insert(fid=fid, message=message, from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, updated_time=updated_time,comments_arr=comments_arr)\n                    fbdb.commit()\n\n            posts_data=graph.request(fid + \'/posts\', args={\'fields\': qtext, \'until\': until, \'limit\':50  })\n            data = posts_data["data"]\n            delay()\n        message = \'finished\'\n\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message)\n\n    return dict(message=message, postsdata=postsdata)\n\n@auth.requires_login()\ndef getPost(gid):\n    graph = getGraph()\n    try:\n        fb_obj = graph.request(gid,args={\'fields\': \'id, message, updated_time, from, created_time, status_type, type, link, likes.limit(1).summary(true), shares, comments.limit(5).summary(true), object_id, picture\'})\n        delay()\n        fid= fb_obj["id"]\n        message =  fb_obj["message"] if (\'message\' in fb_obj) else None\n        created_time = datetime.datetime.strptime(fb_obj["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'created_time\' in fb_obj) else None\n        updated_time = datetime.datetime.strptime(fb_obj["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'updated_time\' in fb_obj) else None\n        from_id = fb_obj["from"]["id"] if (\'from\' in fb_obj) else None\n        from_name = fb_obj["from"]["name"] if (\'from\' in fb_obj) else None\n        status_type = fb_obj["status_type"] if (\'status_type\' in fb_obj) else None\n        ptype = fb_obj["type"] if (\'type\' in fb_obj) else None\n        status_type = fb_obj["status_type"] if (\'status_type\' in fb_obj) else None\n        link =  fb_obj["link"] if (\'link\' in fb_obj) else None\n        picture =  fb_obj["picture"] if (\'picture\' in fb_obj) else None\n        shares_count = fb_obj["shares"][\'count\'] if (\'shares\' in fb_obj) else 0\n        likes_count = fb_obj["likes"]["summary"]["total_count"] if (\'summary\' in fb_obj) else 0\n        comment_count = fb_obj["comments"]["summary"]["total_count"] if (\'summary\' in fb_obj) else 0\n        object_id = fb_obj["object_id"] if (\'object_id\' in fb_obj) else None\n\n        if (ptype == \'link\' ) | (ptype == \'video\'):\n            try:\n                picture =getOpengraphImage(link)\n                if picture == \'\':\n                    picture = fb_obj["picture"] if (\'picture\' in fb_obj) else None\n            except:\n                picture = fb_obj["picture"] if (\'picture\' in fb_obj) else None\n        elif (ptype == \'photo\' ) :\n            try:\n                images=[]\n                images =graph.request(object_id , args={\'fields\':\'images\'})["images"]\n                delay()\n                for image in images:\n                    if (image["height"] > 200):\n                        picture = image["source"]\n            except:\n                picture = fb_obj["picture"] if (\'picture\' in fb_obj) else None\n        else:\n            picture = fb_obj["picture"] if (\'picture\' in fb_obj) else None\n\n\n        row = fbdb(fbdb.post.fid==from_id).select().first()\n        if row:\n            row.update_record(fid=fid, message=message,from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count,likes_count=likes_count,comment_count=comment_count,team=team, updated_time=updated_time)\n        else:\n            fbdb.post.insert(fid=fid, message=message,from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count,likes_count=likes_count,comment_count=comment_count, updated_time=updated_time)\n            fbdb.commit()\n        message=\'Successfully adding new post into the database\'\n\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=gid,date_time=datetime.datetime.utcnow(),error_msg=message)\n        fbdb.commit()\n\n\n    return dict(message=message)\n\n@auth.requires_login() # this part need to be modified in the future, now only support 500 records.\ndef getComment(fid, from_team, from_page, from_post):\n    com = fbdb(fbdb.comments.fid == fid).select().first()\n    r_message = \'\'\n    if com == None:\n        try:\n            graph = getGraph()\n            post=graph.request(fid, args={\'fields\':\'likes.limit(1000),comments.limit(1000),message,from,id,like_count,created_time,parent,comment_count\'})\n            delay()\n            created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n            message = post["message"] if (\'message\' in post) else None\n            segment = list(jieba.cut(message))\n            cid = post["id"] if (\'id\' in post) else None\n            picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n            from_id = post["from"]["id"] if (\'from\' in post) else None\n            if from_id:\n                person = People(from_id)\n            from_name = post["from"]["name"] if (\'from\' in post) else None\n            likes = []\n            likes = post["likes"][\'data\'] if (\'likes\' in post) else []\n            comments = []\n            comments = post["comments"][\'data\'] if (\'comments\' in post) else []\n            like_count = post["like_count"] if (\'like_count\' in post) else None\n            comment_count = post["comment_count"] if (\'comment_count\' in post) else None\n            parent = post["parent"] if (\'parent\' in post) else None\n\n            row1 = fbdb(fbdb.comments.fid==cid).select().first()\n            #if row1:\n            #    row1.update_record(from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n            #   r_message=\'successfully updated the comment\'\n            #   row_json = fbdb(fbdb.comments.fid==cid).select().first().as_json()\n            #else:\n            fbdb.comments.insert(fid=cid, from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n            fbdb.commit()\n            row_json = fbdb(fbdb.comments.fid==cid).select().first().as_json()\n            r_message=\'successfully added the comment into DB\'\n        except GraphAPIError, e:\n            #raise\n            row_json = {}\n            r_message=e.result\n            fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=r_message)\n            fbdb.commit()\n            \n        except :\n            #raise\n            row_json = {}\n            r_message="Unexpected error:", sys.exc_info()[0]\n            fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=r_message)\n            fbdb.commit()\n    else:\n        row_json = com.as_json()\n    return dict(message=r_message, result=row_json)\n\n@auth.requires_login()\ndef convertComms(fid):\n    graph = getGraph()\n    row= fbdb(fbdb.post.fid == fid).select().first()\n    from_team = row[\'from_name\']\n    from_page = row[\'from_id\']\n    from_post = row[\'fid\']\n    comments_arr = row[\'comments_arr\']\n    for comment in comments_arr:\n        fid = comment[\'id\']\n        com = fbdb(fbdb.comments.fid == fid).select().first()\n        if com == None:\n            result = getComment(fid, from_team, from_page, from_post)\n            comments = result["comments"] if \'comments\' in result else []\n            for comm in comments:\n                cid = comm[\'id\']\n                if com2 == None:\n                    com2 = fbdb(fbdb.comments.fid == cid).select().first()\n                    getComment(fid, from_team, from_page, from_post)\n    return "ok"\n\n@auth.requires_login()\ndef getPostSocialCount(fid):\n    import datetime\n    from datetime import timedelta\n    import time\n    graph = getGraph()\n    try:\n        #pid = checkGraphId(oid) \' Only for Place page\n        fb_obj = graph.request(fid ,args={\'fields\': \'id, from, shares, updated_time,comments.limit(1).summary(true), message, likes.limit(1).summary(true)\'})\n        from_id = fb_obj["from"]["id"]\n        likes_count= fb_obj["likes"]["summary"]["total_count"] if  (\'summary\' in fb_obj["likes"]) else 0\n        shares_count = int(fb_obj["shares"]["count"]) if (\'shares\' in fb_obj) else 0\n        comment_count = int(fb_obj["comments"]["summary"]["total_count"]) if (\'comments\' in fb_obj) else 0\n        updated_time_utc = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #use utcnow for all purposes\n        updated_time_utc = datetime.datetime.strptime(updated_time_utc,\'%Y-%m-%dT%H:%M:%S+0000\')\n        updated_time_tw = updated_time_utc + timedelta(hours=8)\n        fbdb.post.update_or_insert(fbdb.post.fid == fid, from_id=from_id, likes_count=likes_count, updated_time_utc=updated_time_utc, updated_time_tw = updated_time_tw, shares_count=shares_count, comment_count=comment_count)\n        fbdb.post_counts.insert(fid=fid, from_id=from_id, likes_count=likes_count, updated_time_utc=updated_time_utc, updated_time_tw = updated_time_tw, shares_count=shares_count, comment_count=comment_count)\n        fbdb.commit()\n        delay()\n        message=\'Successfully update the PostSocialCount\'\n        return dict(message=message, likes_count=likes_count, updated_time_utc=updated_time_utc, updated_time_tw = updated_time_tw, shares_count=shares_count, comment_count=comment_count)\n\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message)  #dict(message=str[9])\n\n@auth.requires_login()\ndef getPostComments(fid):\n    import datetime\n    from datetime import timedelta\n    import time\n    graph = getGraph()\n    try:\n        qtext = \'id,message,comments,from,like_count,likes\'\n        comments_arr=[]\n        data = []\n        #next = ""\n        after = ""\n        fb_obj = graph.request(fid + \'/comments\' ,args={\'fields\': qtext, \'limit\':200 })\n        delay()\n        data = fb_obj["data"]\n        while len(data) != 0:\n            comments_arr.extend(data)\n            #next = fb_obj["paging"]["next"] if "next" in fb_obj["paging"] else None\n            #qtext = next.split(\'fields=\')[-1].split(\'&\')[1] if next != None else None\n            after = fb_obj["paging"]["cursors"]["after"]\n            fb_obj = graph.request(fid + \'/comments\' ,args={\'fields\': qtext, \'limit\':200, \'after\': after })\n            delay()\n            data = fb_obj["data"]\n\n        fbdb.post.update_or_insert(fbdb.post.fid == fid, comments_arr=comments_arr)\n        fbdb.commit()\n        message = \'Successfully update the Post Comments\'\n        return dict(message=message,comments_arr=comments_arr)\n\n    except GraphAPIError, e:\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        if message.get("error").get("code") == 2:\n            delay()\n            result=getPostComments(fid)\n            return dict(message=message,comments_arr=result["comments_arr"])\n        return dict(message=message,comments_arr=[])\n\n    return None\n\n@auth.requires_login()\ndef getPostCommentsDays(fid, days):\n    #fid=\'652438848137404_738704049510883\'\n    import datetime\n    from datetime import timedelta\n    import time\n    f_date = datetime.datetime.today()-timedelta(days=days)\n    since = int(time.mktime(f_date.timetuple()))\n    until = int(time.time())\n    graph = getGraph()\n    try:\n        qtext = \'id,message,comments,from,like_count,likes\'\n        comments_arr=[]\n        data = []\n        #next = ""\n        after = ""\n        fb_obj = graph.request(fid + \'/comments\' ,args={\'fields\': qtext, \'limit\':200,\'since\': since, \'until\':until })\n        delay()\n        data = fb_obj["data"]\n        while len(data) != 0:\n            comments_arr.extend(data)\n            #next = fb_obj["paging"]["next"] if "next" in fb_obj["paging"] else None\n            #qtext = next.split(\'fields=\')[-1].split(\'&\')[1] if next != None else None\n            after = fb_obj["paging"]["cursors"]["after"]\n            fb_obj = graph.request(fid + \'/comments\' ,args={\'fields\': qtext, \'limit\':200,\'since\': since, \'until\':until, \'after\': after })\n            delay()\n            data = fb_obj["data"]\n\n        #fbdb.post.update_or_insert(fbdb.post.fid == fid, comments_arr=comments_arr)\n        #fbdb.commit()\n        message = \'Successfully update the Post Comments\'\n        return dict(message=message,comments_arr=comments_arr)\n\n    except GraphAPIError, e:\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        if message.get("error").get("code") == 2:\n            delay()\n            result=getPostCommentsDays(fid, days)\n            return dict(message=message,comments_arr=result["comments_arr"])\n        return dict(message=message, comments_arr=[])\n    except:\n        raise\n        message=  "Unexpected error:", sys.exc_info()[0]\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message,comments_arr=[])\n\n@auth.requires_login()\ndef getPageInsights(fid, from_date):\n    #\n    #fid = \'136845026417486\' \n    #from_date = \'2014/09/16\'\n    import datetime\n    from datetime import timedelta\n    import time\n    since = int(time.mktime(datetime.datetime.strptime(from_date, "%Y/%m/%d").timetuple()))\n    fromdate = since\n    until = int(time.time())\n    graph = getGraph()\n    bulk = []\n    try:\n        data = []\n        insights=[]\n        fb_obj = graph.request(fid + \'/insights\')\n        data = fb_obj["data"]\n        delay()\n\n        while until >= fromdate:\n            insights.append({"data":data})\n            previous = fb_obj["paging"]["previous"] if "previous" in fb_obj["paging"] else None\n            since = int(previous.split(\'since=\')[-1].split(\'&\')[0])\n            until = int(previous.split(\'until=\')[-1].split(\'&\')[0])\n            fb_obj = graph.request(fid + \'/insights\', args={\'pretty\' :0,\'suppress_http_code\' : 1,\'since\': since,\'until\' : until})\n            data = fb_obj["data"]\n            delay()\n\n        insights = list(reversed(insights))\n        for insight in insights:\n            data = insight["data"]\n            if data !=[]:\n                length = len(data[0]["values"])\n                for i in range(0,length):\n                    end_time = data[0]["values"][i]["end_time"]\n                    end_time_utc = datetime.datetime.strptime(end_time,\'%Y-%m-%dT%H:%M:%S+0000\')\n                    end_time_tw = end_time_utc + timedelta(hours=8)\n                    lifetime_likes = data[0]["values"][i]["value"]\n                    daily_people_talking = data[1]["values"][i]["value"] if len(data[1]["values"]) > i else None\n                    weekly_people_talking = data[2]["values"][i]["value"] if len(data[2]["values"]) > i else None\n                    days28_people_talking = data[3]["values"][i]["value"] if len(data[3]["values"]) > i else None\n                    if end_time_utc >= datetime.datetime.strptime(from_date, "%Y/%m/%d"):\n                        row = fbdb((fbdb.page_insights.fid==fid)&(fbdb.page_insights.end_time==end_time)).select().first()\n                        if not row:\n                            fbdb.page_insights.insert(fid=fid, end_time=end_time,lifetime_likes=lifetime_likes, daily_people_talking=daily_people_talking, weekly_people_talking=weekly_people_talking, days28_people_talking = days28_people_talking,  end_time_utc=end_time_utc, end_time_tw=end_time_tw)\n                            fbdb.commit()\n\n        message = \'Successfully update the Post Comments\'\n        return dict(message=message, insights=insights)\n        \n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return dict(message=message)\n\n    return response.json(insights)\n\n@auth.requires_login()\ndef sharedPosts():\n    graph = getGraph()\n    rows= fbdb(fbdb.post.fid <> \'\').select()\n    try:\n        for row in rows:\n            from_team = row[\'team\']\n            from_page = row[\'from_id\']\n            from_post = row[\'fid\']\n            if row[\'ptype\'] != \'photo\':\n                post_id = row[\'fid\'].split(\'_\')[1]\n            else:\n                post_id = row[\'link\'].split(\'/\')[-2]\n                #few(post_id)\n            try:\n                post_data=graph.request(post_id + \'/sharedposts\', args={\'fields\':\'likes.limit(1).summary(1),comments.limit(1).summary(1),message,from,id,created_time, shares\',\'limit\':1000})\n                posts = post_data[\'data\']\n                time.sleep(1.3)\n                for post in posts:\n                    created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n                    message = post["message"] if (\'message\' in post) else None\n                    segment = list(jieba.cut(message))\n                    cid = post["id"] if (\'id\' in post) else None\n                    picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n                    picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n                    from_id = post["from"]["id"] if (\'from\' in post) else None\n                    link = post["link"]\n                    person = fbdb(fbdb.people.uid == from_id).select()\n                    if not person:\n                        getPeople(from_id)\n                        time.sleep(1.3)\n                    person = fbdb(fbdb.people.uid == from_id).select().first()\n                    if person:\n                        share_count = int(person[\'share_count\'])+1 if person[\'share_count\'] != None else 1\n                        share_links = person[\'share_links\'].append(link)\n                        if from_team ==\'\xe6\x9f\xaf\xe6\x96\x87\xe5\x93\xb2\':\n                            g_share_count == int(person[\'g_share_count\'])+1 if person[\'g_share_count\'] != None else 1\n                            g_share_links = person[\'g_share_links\'].append(link)\n                        else :\n                            b_share_count == int(person[\'b_share_count\'])+1 if person[\'b_share_count\'] != None else 1\n\n                        fbdb.people.update_or_insert(fbdb.people.uid == from_id, share_count=share_count)\n                    else:\n                        getPage(from_id)\n                        time.sleep(1.3)\n                    from_name = post["from"]["name"] if (\'from\' in post) else None\n                    likes = {}\n                    likes = post["likes"]["data"] if (\'likes\' in post) else {}\n                    comments = {}\n                    comments = post["comments"]["data"] if (\'comments\' in post) else {}\n                    like_count = post["like_count"] if (\'like_count\' in post) else None\n                    comment_count = post["comment_count"] if (\'comment_count\' in post) else None\n                    parent = post["parent"] if (\'parent\' in post) else {"id" : row[\'fid\']}\n                    share_count=0\n                    share_count = post["shares"]["count"] if (\'shares\' in post) else 0\n                    row1 = fbdb(fbdb.comments.fid==cid).select().first()\n                    if row1:\n                        row1.update_record(from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count,share_count=share_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n                    else:\n                        fbdb.comments.insert(fid=cid, from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count, share_count=share_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n                        fbdb.commit()\n                    for comm in comments:\n                        try:\n                            cid = comm[\'id\']\n                            post=graph.request(cid, args={\'fields\':\'likes.limit(1000),comments.limit(1000),message,from,id,like_count,created_time,parent,comment_count\'})\n                            time.sleep(1.3)\n                            created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n                            message = post["message"] if (\'message\' in post) else None\n                            segment = list(jieba.cut(message))\n                            cid = post["id"] if (\'id\' in post) else None\n                            picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n                            from_id = post["from"]["id"] if (\'from\' in post) else None\n                            person = fbdb(fbdb.people.uid == from_id).select()\n                            if not person:\n                                getPeople(from_id)\n                                time.sleep(1.3)\n                            from_name = post["from"]["name"] if (\'from\' in post) else None\n                            likes = {}\n                            likes = post["likes"][\'data\'] if (\'likes\' in post) else {}\n                            comments = {}\n                            comments = post["comments"][\'data\'] if (\'comments\' in post) else {}\n                            like_count = post["like_count"] if (\'like_count\' in post) else None\n                            comment_count = post["comment_count"] if (\'comment_count\' in post) else None\n                            parent = post["parent"] if (\'parent\' in post) else None\n                            #share_count = post["share_count"]if (\'share_count\' in post) else None\n                            row2 = fbdb(fbdb.comments.fid==cid).select().first()\n                            if row2:\n                                row2.update_record(from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n                            else:\n                                fbdb.comments.insert(fid=cid, from_id=from_id, from_name=from_name, message=message, created_time=created_time, picture=picture, likes=likes,  comments=comments, like_count=like_count, comment_count=comment_count, from_post=from_post, from_page=from_page, from_team=from_team, parent=parent, segment=segment )\n                                fbdb.commit()\n                        except GraphAPIError, e:\n                            raise\n                            message=e.result\n                            fbdb.graphAPI_Error.insert(oid=from_post,date_time=datetime.datetime.today(),error_msg=message)\n                            fbdb.commit()\n            except GraphAPIError, e:\n                raise\n                message=e.result\n                fbdb.graphAPI_Error.insert(oid=from_post,date_time=datetime.datetime.today(),error_msg=message)\n                fbdb.commit()\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbdb.graphAPI_Error.insert(oid=from_post,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n    return "ok"\n\n@auth.requires_login()\ndef getSharedPosts(eventid):\n    #eventid= \'1425229754405677\'\n    import time\n    try:\n        graph = getGraph()\n        posts_data=graph.request(eventid + \'/sharedposts\', args={\'fields\':\'id, place, message, updated_time, from.fields(id,name,picture) , created_time, status_type, type, link,picture, likes.limit(1).summary(true), shares,  comments.limit(1000).fields(from.fields(picture,id,name), message, created_time).summary(true), object_id\', \'limit\':1000})\n        delay()\n        data = []\n        data = posts_data["data"]\n        Urow = fbpl(fbpl.event.eventid==eventid).select().first()\n        if Urow:\n            shared_count = Urow.shared_count if Urow.shared_count else 0\n            shared_count_sincelastupdate = len(data) - int(shared_count) if shared_count else 0\n            Urow.update_record(shared_count = len(data), shared_count_sincelastupdate=shared_count_sincelastupdate)\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=eventid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n    try:\n        for post in data:\n            fid = post["id"].split(\'_\')[1]\n            message =  post["message"] if (\'message\' in post) else None\n            from_id = post["from"]["id"] if (\'from\' in post) else None\n            from_name = post["from"]["name"] if (\'from\' in post) else None\n            from_picture = post["from"]["picture"]["data"]["url"] if (\'from\' in post) else None\n            created_time = post["created_time"] if (\'created_time\' in post) else None\n            updated_time = post["updated_time"] if (\'updated_time\' in post) else None\n            status_type = post["status_type"] if (\'status_type\' in post) else None\n            ptype = post["type"] if (\'type\' in post) else None\n            status_type = post["status_type"] if (\'status_type\' in post) else None\n            link = post["link"] if (\'link\' in post) else None\n            picture = post["picture"] if (\'picture\' in post) else None\n            shares_count = post["shares"][\'count\'] if (\'shares\' in post) else 0\n            likes_count = post["likes"]["summary"]["total_count"] if (\'likes\' in post) else 0\n            comment_count = post["comments"]["summary"]["total_count"] if (\'comments\' in post) else 0\n            comments_arr=[]\n            comments_arr = post["comments"][\'data\'] if (\'comments\' in post) else []\n            object_id = post["object_id"] if (\'object_id\' in post) else None\n            if picture <> \'\':\n                picture = picture.replace(\'_s.jpg\',\'_n.jpg\').replace(\'130x130/\',\'\')\n            placeid = post["place"]["id"] if (\'place\' in post) else None\n            placename = post["place"]["name"] if (\'place\' in post) else None\n            if placeid != \'\' :\n                getPlace(placeid)\n                time.sleep(1)\n\n            row = fbpl(fbpl.post.fid==fid).select().first()\n            if row:\n                likes_sincelastupdate = int(likes_count)-int(row.likes_count) if likes_count else 0\n                shares_sincelastupdate = int(shares_count)-int(row.shares_count) if shares_count else 0\n                comment_sincelastupdate = int(comment_count)-int(row.comment_count) if comment_count else 0\n                row.update_record(message=message, eventid=eventid, object_id=object_id,ptype=ptype, status_type=status_type, link=link, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, likes_sincelastupdate=likes_sincelastupdate, shares_sincelastupdate=shares_sincelastupdate, comment_sincelastupdate=comment_sincelastupdate, placeid=placeid, placename=placename, updated_time=updated_time,comments_arr=comments_arr, from_picture=from_picture)\n            else:\n                likes_sincelastupdate=0\n                shares_sincelastupdate=0\n                comment_sincelastupdate=0\n                fbpl.post.insert(fid=fid, message=message,eventid=eventid, from_id=from_id, from_name=from_name, from_picture=from_picture,   created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, likes_sincelastupdate=likes_sincelastupdate, shares_sincelastupdate=shares_sincelastupdate, comment_sincelastupdate=comment_sincelastupdate, placeid=placeid, placename=placename, updated_time=updated_time,comments_arr=comments_arr)\n                fbpl.commit()\n\n        message = "all posts finished"\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n\n    return dict(message=message)\n\n@auth.requires_login()\ndef Sex(uid):\n    row = fbdb(fbdb.people.uid==uid).select().first()\n    if not row:\n        user = People(uid)\n        gender = user.gender\n    else:\n        gender = row["gender"] if \'gender\' in row else None\n    return gender\n\n@auth.requires_login()\ndef getPeople(userid):\n    try:\n        graph = getGraph()\n        posts_data=graph.request(userid, args={\'fields\':\'id,first_name,last_name,locale,gender,link,location,name,updated_time,age_range,hometown,education,timezone,work,picture\'})\n        delay()\n        post = {}\n        post = posts_data\n    except GraphAPIError, e:\n        message=e.result\n        #fbdb.graphAPI_Error.insert(oid=userid,date_time=datetime.datetime.today(),error_msg=message)\n        #fbdb.commit()\n        code =message[\'error\'][\'code\']\n        if code ==100:\n            try:\n                posts_data=graph.request(userid, args={\'fields\':\'id,name,category,picture,link,website\'})\n                delay()\n                post = {}\n                post = posts_data\n                uid = post["id"]\n                name  = post["name"] if (\'name\' in post) else None\n                category  = post["category"] if (\'category\' in post) else None\n                picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n                link = post["link"] if (\'link\' in post) else None\n                website = post["website"] if (\'website\' in post) else None\n                gender = None\n                fbdb.people.insert(uid=uid, name=name, category=category, link=link, picture=picture, website=website)\n                fbdb.commit()\n                return "add page id"\n\n            except:\n                fbdb.people.insert(uid=userid, name="unavailable user")\n                message=  "Unexpected error:", sys.exc_info()[0]\n                fbdb.graphAPI_Error.insert(oid=userid,date_time=datetime.datetime.today(),error_msg=message)\n                fbdb.commit()\n                return "unavailable user"\n        \n    except:\n        raise\n        message=  "Unexpected error:", sys.exc_info()[0]\n        fbdb.graphAPI_Error.insert(oid=userid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n        return "unknown error"\n\n    uid = post["id"]\n    first_name =  post["first_name"] if (\'first_name\' in post) else None\n    last_name = post["last_name"] if (\'last_name\' in post) else None\n    locale  = post["locale"] if (\'locale\' in post) else None\n    gender  = post["gender"] if (\'gender\' in post) else None\n    religion  = post["religion"] if (\'religion\' in post) else None\n    location  = post["location"] if (\'location\' in post) else None\n    name  = post["name"] if (\'name\' in post) else None\n    website  = post["website"] if (\'website\' in post) else None\n    relationship_status   = post["relationship_status"] if (\'relationship_status\' in post) else None\n    updated_time = datetime.datetime.strptime(post["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'updated_time\' in post) else None\n    age_range  = post["age_range"] if (\'age_range\' in post) else None\n    hometown  = post["hometown"] if (\'hometown\' in post) else None\n    education  = post["education"] if (\'education\' in post) else None\n    timezone  = post["timezone"] if (\'timezone\' in post) else None\n    work  = post["work"] if (\'work\' in post) else None\n    email  = post["email"] if (\'email\' in post) else None\n    link = post["link"] if (\'link\' in post) else None\n    picture = post["picture"]["data"]["url"] if (\'picture\' in post) else None\n    fbdb.people.update_or_insert(fbdb.people.uid==uid, uid=uid, first_name=first_name, last_name=last_name, locale=locale, gender=gender, religion=religion, location=location, name=name, website=website, relationship_status=relationship_status, updated_time=updated_time, age_range=age_range, hometown=hometown, education=education, timezone=timezone, work=work, email=email, link=link, picture=picture)\n    fbdb.commit()\n    message = "personal data collected"\n    return post\n    #return dict(message=message)\n\n@auth.requires_login()\ndef getPlace(gid):\n    graph = getGraph()\n    try:\n        if gid:       \n            fb_obj = graph.get_object(gid)\n            id= fb_obj["id"]\n            row = fbdb.place(placeid=id)\n            if not row: \n                name =  fb_obj["name"]\n                category = fb_obj["category"] if \'category\' in fb_obj else None\n                category_list =  fb_obj["category_list"] if \'category_list\' in fb_obj else None\n                checkins= fb_obj["checkins"] if \'checkins\' in fb_obj else None\n                link= fb_obj["link"] if \'link\' in fb_obj else None\n                old_ids = \'\'\n                if (\'location\' in fb_obj):\n                    zip= fb_obj["location"]["zip"] if \'zip\' in fb_obj["location"] else None\n                    country= fb_obj["location"]["country"] if \'country\' in fb_obj["location"] else None\n                    state= fb_obj["location"]["state"] if \'state\' in fb_obj["location"] else None\n                    street= fb_obj["location"]["street"] if \'street\' in fb_obj["location"] else None\n                    latitude= fb_obj["location"]["latitude"] if \'latitude\' in fb_obj["location"] else None\n                    longitude= fb_obj["location"]["longitude"] if \'longitude\' in fb_obj["location"] else None\n                else:\n                    zip= None\n                    country= None\n                    state= None\n                    street= None\n                    latitude= None\n                    longitude= None\n\n                fbdb.place.insert(placeid=id,name = name,country = country,state = state,street = street,latitude=latitude,longitude=longitude,category=category,category_list=category_list,zip=zip,link=link,old_ids=old_ids)\n\n            fbdb.commit()\n            message=\'Successfully adding new place into the database\'\n        else:\n            message=\'failure, please check your placeid!\'\n    except GraphAPIError, e:\n        message=e.result\n        fbdb.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n    \n    \n    return dict(message=message) \n\ndef delay():\n    time.sleep(1.5)\n\ndef localTz():\n    import time\n    if time.daylight:\n        offsetHour = time.altzone\n    else:\n        offsetHour = time.timezone\n    return offsetHour\n\n@auth.requires_login()\ndef get_og_url(url):\n    graph = getGraph()\n    url = url.strip()\n    url = url.split("://")[0] + "://" + urllib.quote(url.split("://")[1])\n    try:\n        result = graph.request( url,args={\'fields\':\'og_object{id,description,title,type,url,created_time,updated_time},share,id\'})\n        delay()\n        fid = result["og_object"]["id"] if \'og_object\' in result else None\n        fb_url = result["og_object"]["url"] if \'og_object\' in result else None\n        created_time = datetime.datetime.strptime(result["og_object"]["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if \'created_time\' in result["og_object"] else None\n        updated_time = datetime.datetime.strptime(result["og_object"]["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if \'updated_time\' in result["og_object"] else None\n        updated_time_tw = updated_time + timedelta(hours=8) if updated_time else None\n        created_time_tw = created_time + timedelta(hours=8) if created_time else None\n        description = result["og_object"]["description"] if \'description\' in result["og_object"] else None\n        title = result["og_object"]["title"] if \'title\' in result["og_object"] else None\n        type = result["og_object"]["type"] if \'type\' in result["og_object"] else None\n        if "share" in result:\n            comment_count = int(result["share"]["comment_count"]) if \'comment_count\' in result["share"] else None\n            share_count = int(result["share"]["share_count"]) if \'share_count\' in result["share"] else None\n        else:\n            comment_count = None\n            share_count = None\n    except GraphAPIError, e:\n        fid = None\n        fb_url = None\n        created_time = None\n        updated_time = None\n        updated_time_tw = None\n        created_time_tw = None\n        description = None\n        title = None\n        comment_count =  None\n        share_count = None\n        type = None\n        message = e.result\n        fbdb.graphAPI_Error.insert(oid=url, date_time=datetime.datetime.today(), error_msg=message)\n        fbdb.commit()\n\n    og = {"fid":fid, "fb_url":fb_url, "updated_time_tw":updated_time_tw, "created_time_tw":created_time_tw,  "type":type, "title":title, "description":description, "comment_count":comment_count, "share_count":share_count, "updated_time":updated_time, "created_time":created_time}\n    return og\n\n@auth.requires_login()\ndef get_og_urls(urls):\n    graph = getGraph()\n    url_list = urls.split(\',\')\n    result = graph.request(\'\',args={\'ids\': urls,\'fields\':\'og_object{id,description,title,type,url,created_time,updated_time},share,id\'})\n    delay()\n    ogs={}\n    for url in url_list:\n        try:\n            fid = result[url]["og_object"]["id"] if \'og_object\' in result[url] else None\n            fb_url = result[url]["og_object"]["url"] if \'og_object\' in result[url] else None\n            created_time = datetime.datetime.strptime(result[url]["og_object"]["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if \'created_time\' in result[url]["og_object"] else None\n            updated_time = datetime.datetime.strptime(result[url]["og_object"]["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if \'updated_time\' in result[url]["og_object"] else None\n            updated_time_tw = updated_time + timedelta(hours=8) if updated_time else None\n            created_time_tw = created_time + timedelta(hours=8) if created_time else None\n            description = result[url]["og_object"]["description"] if \'description\' in result[url]["og_object"] else None\n            title = result[url]["og_object"]["title"] if \'title\' in result[url]["og_object"] else None\n            type = result[url]["og_object"]["type"] if \'type\' in result[url]["og_object"] else None\n            if "share" in result[url]:\n                comment_count = int(result[url]["share"]["comment_count"]) if \'comment_count\' in result[url]["share"] else None\n                share_count = int(result[url]["share"]["share_count"]) if \'share_count\' in result[url]["share"] else None\n            else:\n                comment_count = None\n                share_count = None\n        except GraphAPIError, e:\n            fid = None\n            fb_url = None\n            created_time = None\n            updated_time = None\n            updated_time_tw = None\n            created_time_tw = None\n            description = None\n            title = None\n            comment_count =  None\n            share_count = None\n            type = None\n            message = e.result\n            fbdb.graphAPI_Error.insert(oid=url, date_time=datetime.datetime.today(), error_msg=message)\n            fbdb.commit()\n\n        og = {"fid":fid, "fb_url":fb_url, "updated_time_tw":updated_time_tw, "created_time_tw":created_time_tw,  "type":type, "title":title, "description":description, "comment_count":comment_count, "share_count":share_count, "updated_time":updated_time, "created_time":created_time}\n        ogs.update({url:og})\n    return ogs\n\n@auth.requires_login()\ndef getNewsComments(ids, from_team, news_source, href):\n    import datetime\n    graph = getGraph()\n    try:\n        qtext = \'id,from,message,comments.limit(1000),created_time,like_count, comment_count, can_remove,likes.limit(1000)\'\n        comments_arr = []\n        data = []\n        data_all = []\n        next_p = None\n        after = ""\n        fb_obj = graph.request(ids + \'/comments\', args={\'fields\': qtext, \'limit\': 1000})\n        news_href = href\n        delay()\n        data = fb_obj["data"]  #if "comments" in fb_obj[ids] else fb_obj[ids]["data"]\n        #if len(data) != 0:\n        #    if "paging" in fb_obj:\n        #        next_p = fb_obj["paging"]["next"] if "next" in fb_obj["paging"] else None\n        #        after = fb_obj["paging"]["cursors"]["after"]\n\n        while len(data) != 0:\n            data_all.extend(data)\n            after = fb_obj["paging"]["cursors"]["after"]\n            fb_obj = graph.request(ids + \'/comments\', args={\'fields\': qtext, \'limit\': 1000, \'after\':after})\n            delay()\n            data = fb_obj["data"]\n        for item in data_all:\n            created_time = parser.parse(item["created_time"])\n            fid = item["id"]\n            from_id = item["from"]["id"] if \'from\' in item else None\n            if from_id <> None:\n                getPeople(from_id)\n            from_name = item["from"]["name"] if \'from\' in item else None\n            message = item["message"] if \'message\' in item else None\n            comments_arr.append(message)\n            comment_count = item["comment_count"] if \'comment_count\' in item else None\n            comments = item["comments"]["data"] if \'comments\' in item else None\n            if comments:\n                for comm in comments:\n                    comments_arr.append(comm["message"])\n            can_remove = item["can_remove"] if \'can_remove\' in item else None\n            segment = list(jieba.cut(message))\n            #segment = pseg.cut(row[\'message\'])\n            like_count = item["like_count"] if \'like_count\' in item else 0\n            likes = []\n            likes = item["likes"]["data"] if \'likes\' in item else []\n            for person in likes:\n                uid = person["id"]\n                row = fbdb(fbdb.people.uid == uid).select().first()\n                result = \'\'\n                if not row:\n                    result = getPeople(uid)\n\n            fbdb.news_comments.update_or_insert(fbdb.news_comments.fid == fid, fid=fid, from_id=from_id,\n                                                from_name=from_name, message=message, comments=comments, created_time=created_time,\n                                                likes=likes, like_count=like_count, comment_count=comment_count, from_team=from_team,\n                                                news_source=news_source, news_href=news_href, segment=segment,\n                                                news_fid=ids)\n            fbdb.commit()\n\n\n        message = \'Successfully update the news Comments\'\n        return dict(message=message, comments_arr=comments_arr)\n\n    except GraphAPIError, e:\n\n        message = e.result\n        fbdb.graphAPI_Error.insert(oid=ids, date_time=datetime.datetime.today(), error_msg=message)\n        fbdb.commit()\n        if message.get("error").get("code") == 2:\n            delay()\n            result = getNewsComments(ids, from_team, news_source, href)\n            return dict(message=message, comments_arr=result["comments_arr"])\n        return dict(message=message, comments_arr=[])\n\n    except:\n\n        message = "Unexpected error:", sys.exc_info()[0]\n        fbdb.graphAPI_Error.insert(oid=ids, date_time=datetime.datetime.today(), error_msg=message)\n        fbdb.commit()\n        return dict(message=message, comments_arr=[])\n\n    return None\n\ndef convertNewsComms(fid):\n    graph = getGraph()\n    row= fbdb(fbdb.news_comments.fid == fid).select().first()\n    from_team = row[\'from_team\']\n    news_source = row[\'news_source\']\n    news_href = row[\'news_href\']\n    news_fid = row[\'fid\']\n    comments_arr = row[\'comments\']\n    for comment in comments_arr:\n        ffid = comment[\'id\']\n        com = fbdb(fbdb.news_comments.fid == ffid).select().first()\n        if com == None:\n            result = getNewsComment(ffid, news_source, news_href, news_fid, from_team)\n            comments = result["comments"] if \'comments\' in result else None\n            if comments:\n                for comm in comments:\n                    cid = comm[\'id\']\n                    com2 = fbdb(fbdb.news_comments.fid == cid).select().first()\n                    if com2 == None:\n                        result = getNewsComment(cid,news_source, news_href, news_fid, from_team)\n    return str(comments_arr)\n\n@auth.requires_login()\ndef getNewsComment(fid, news_source, news_href, news_fid, from_team):\n    #com = fbdb(fbdb.news_comments.fid == fid).select().first()\n    r_message = \'\'\n    #if com == None:\n    try:\n        graph = getGraph()\n        post = graph.request(fid, args={\'fields\':\'likes.limit(1000),comments.limit(1000),message,from,id,like_count,created_time,parent,comment_count\'})\n        delay()\n        created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if (\'created_time\' in post) else None\n        message = post["message"] if (\'message\' in post) else None\n        segment = list(jieba.cut(message))\n        cid = post["id"] if (\'id\' in post) else None\n        from_id = post["from"]["id"] if (\'from\' in post) else None\n        if from_id <> None:\n            person = People(from_id)\n        from_name = post["from"]["name"] if (\'from\' in post) else None\n        likes = []\n        likes = post["likes"][\'data\'] if (\'likes\' in post) else []\n        for person in likes:\n            uid = person["id"]\n            row = fbdb(fbdb.people.uid == uid).select().first()\n            if not row:\n                getPeople(uid)\n\n        comments = post["comments"][\'data\'] if (\'comments\' in post) else None\n        like_count = post["like_count"] if (\'like_count\' in post) else None\n        comment_count = post["comment_count"] if (\'comment_count\' in post) else None\n        parent = post["parent"] if (\'parent\' in post) else None\n        fbdb.news_comments.update_or_insert(fbdb.news_comments.fid == cid, fid = cid, from_id = from_id, from_name = from_name, message=message, created_time = created_time, likes=likes, comments=comments, like_count=like_count, comment_count=comment_count, from_team = from_team, parent = parent, segment = segment, news_source = news_source, news_href = news_href, news_fid = news_fid)\n        fbdb.commit()\n        row_json = fbdb(fbdb.news_comments.fid==cid).select().first().as_json()\n        r_message=\'successfully added the comment into DB\'\n    except GraphAPIError, e:\n        raise\n        row_json = {}\n        r_message=e.result\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=r_message)\n        fbdb.commit()\n\n    except :\n        raise\n        row_json = {}\n        r_message="Unexpected error:", sys.exc_info()[0]\n        fbdb.graphAPI_Error.insert(oid=fid,date_time=datetime.datetime.today(),error_msg=r_message)\n        fbdb.commit()\n    #else:\n    #    row_json = com.as_json()\n    return dict(message=r_message, result=row_json)\n\n\n@auth.requires_login()\ndef getUrlSocialCount(href):\n    updated_time_utc = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #use utcnow for all purposes\n    updated_time_utc = datetime.datetime.strptime(updated_time_utc,\'%Y-%m-%dT%H:%M:%S+0000\')\n    updated_time_tw = updated_time_utc + timedelta(hours=8)\n    try:\n        og = get_og_url(href)\n        fid = og["fid"]\n        share_count = og["share_count"]\n        comment_count = og["comment_count"]\n        row = fbdb(fbdb.news.fid == fid).select().first()\n        if row:\n            row.update_record(**og)\n        fbdb.news_social_counts.insert(fid=fid, news_href=href, comment_count=comment_count, share_count=share_count, updated_time_utc=updated_time_utc, updated_time_tw=updated_time_tw )\n        fbdb.commit()\n        message = \'successfully update the UrlSocialCount\'\n    except GraphAPIError, e:\n        #raise\n        share_count=None\n        comment_count=None\n        message = e.result\n        fbdb.graphAPI_Error.insert(oid=url, date_time=datetime.datetime.today(), error_msg=message)\n        fbdb.commit()\n        return dict(message=message, share_count=share_count, comment_count=comment_count)\n\n    return dict(message=message, share_count=share_count, comment_count=comment_count)\n\n\n@auth.requires_login()\ndef getGroupUrlsSocialCount(urls):\n    updated_time_utc = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #use utcnow for all purposes\n    updated_time_utc = datetime.datetime.strptime(updated_time_utc,\'%Y-%m-%dT%H:%M:%S+0000\')\n    updated_time_tw = updated_time_utc + timedelta(hours=8)\n    ogs = get_og_urls(urls)\n    for fb_url in ogs.items:\n        fid = ogs[fb_url]["fid"]\n        share_count = ogs[fb_url]["share_count"]\n        comment_count = ogs[fb_url]["comment_count"]\n        row = fbdb(fbdb.news.fid == fid).select().first()\n        #if row:\n        #    row.update_record(**og)\n        fbdb.news_social_counts.insert(fid=fid, news_href=href, comment_count=comment_count, share_count=share_count, updated_time_utc=updated_time_utc, updated_time_tw=updated_time_tw )\n        fbdb.commit()\n    message = \'successfully update the GroupUrlsSocialCount\'\n\n    #try:\n    # except GraphAPIError, e:\n    #     #raise\n    #     share_count=None\n    #     comment_count=None\n    #     message = e.result\n    #     fbdb.graphAPI_Error.insert(oid=url, date_time=datetime.datetime.today(), error_msg=message)\n    #     fbdb.commit()\n    #     return dict(message=message, share_count=share_count, comment_count=comment_count)\n\n    return dict(message=message, share_count=share_count, comment_count=comment_count)\n\n\ndef get_news(href):\n    try:\n        updated_time_utc = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #use utcnow for all purposes\n        updated_time_utc = datetime.datetime.strptime(updated_time_utc,\'%Y-%m-%dT%H:%M:%S+0000\')\n        updated_time_tw = updated_time_utc + timedelta(hours=8)\n        href = href.strip()\n        url2 = href.split("://")[0] + "://" + urllib.quote(href.split("://")[1])\n        og = get_og_url(url2)\n        fid = og["fid"]\n        fb_url = og["fb_url"]\n        share_count = og["share_count"]\n        comment_count = og["comment_count"]\n        created_time = og["created_time"]\n        updated_time = og["updated_time"]\n        title = og["title"]\n        summary = og[\'description\']\n        fbdb.news.update_or_insert(fbdb.news.fid==fid, href=href, **og)\n        fbdb.news_social_counts.insert(fid=fid, news_href=href, comment_count=comment_count, share_count=share_count, updated_time_utc=updated_time_utc, updated_time_tw=updated_time_tw )\n        fbdb.commit()\n        message=\'Successfully adding news into the database\'\n    except GraphAPIError, e:\n        raise\n        share_count=None\n        comment_count=None\n        message=e.result\n        fbdb.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbdb.commit()\n    return dict(message=message, share_count=share_count, comment_count=comment_count )\n\ndef delay():\n    time.sleep(1.5)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__getslice__'
p12
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p13
sS'text'
p14
S'"urls = urls + \',\' + url if len(urls) == 0 else urls = url\\n"'
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p23
sS'__init__'
p24
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p25
sS'__setattr__'
p26
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p27
sS'__reduce_ex__'
p28
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p29
sS'__new__'
p30
S'<built-in method __new__ of type object>'
p31
sS'__format__'
p32
S'<built-in method __format__ of exceptions.SyntaxError object>'
p33
sS'__class__'
p34
S"<type 'exceptions.SyntaxError'>"
p35
sS'filename'
p36
S"'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py'"
p37
sS'lineno'
p38
S'596'
p39
sS'msg'
p40
S'"can\'t assign to conditional expression"'
p41
sS'__doc__'
p42
S"'Invalid syntax.'"
p43
sS'__getitem__'
p44
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p45
sS'__setstate__'
p46
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p47
sS'__getattribute__'
p48
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p49
sS'print_file_and_line'
p50
S'None'
p51
sS'args'
p52
S'("can\'t assign to conditional expression", (\'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py\', 596, None, "urls = urls + \',\' + url if len(urls) == 0 else urls = url\\n"))'
p53
sS'__subclasshook__'
p54
S'<built-in method __subclasshook__ of type object>'
p55
sS'offset'
p56
S'None'
p57
sS'__unicode__'
p58
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p59
sS'__delattr__'
p60
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p61
sS'__repr__'
p62
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p63
sS'__hash__'
p64
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p65
ssS'evalue'
p66
S"can't assign to conditional expression (graph.py, line 596)"
p67
sS'request'
p68
cgluon.html
XML_unpickle
p69
(S's\x18c\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>fbbrt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>newsAPI</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-59231e73-010a-440e-89ed-903d6002e790<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_brt</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-4e84140c-e4fd-4346-8cc0-15f56105c469<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_fbbrt</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_fsr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6d8b6df8-37f9-42fc-b03f-667ec15a1f28<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CACHE_CONTROL</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_fsr=127.0.0.1-6d8b6df8-37f9-42fc-b03f-667ec15a1f28; session_id_brt=127.0.0.1-4e84140c-e4fd-4346-8cc0-15f56105c469; session_id_admin=127.0.0.1-59231e73-010a-440e-89ed-903d6002e790; session_id_fbbrt=127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>localhost:8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/fbbrt/newsAPI/test2.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>49236</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>maclogair.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/Users/logyuan/Documents/web2py/applications/fbbrt/&#x27;, &#x27;/Users/logyuan/Documents/web2py/applications/admin/&#x27;, &#x27;/Users/logyuan/Documents/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x10c7044d0: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;192.168.2.1&#x27;, &#x27;192.168.4.29&#x27;, &#x27;172.20.10.4&#x27;, &#x27;fe80::40c:ceff:fe3e:b700%bridge0&#x27;, &#x27;fe80::60c:ceff:fee3:df4a%en0&#x27;, &#x27;fe80::34a3:95ff:fec7:ca59%en3&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;maclogair.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Users/logyuan/Documents/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cache_control</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_fsr=127.0.0.1-6d8b6df8-37f9-42fc-b03f-667ec15a1f28; session_id_brt=127.0.0.1-4e84140c-e4fd-4346-8cc0-15f56105c469; session_id_admin=127.0.0.1-59231e73-010a-440e-89ed-903d6002e790; session_id_fbbrt=127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>localhost:8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.2.1</div></td></tr><tr><td><div>192.168.4.29</div></td></tr><tr><td><div>172.20.10.4</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::60c:ceff:fee3:df4a%en0</div></td></tr><tr><td><div>fe80::40c:ceff:fe3e:b700%bridge0</div></td></tr><tr><td><div>maclogair.local</div></td></tr><tr><td><div>fe80::34a3:95ff:fec7:ca59%en3</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/fbbrt/newsAPI/test2.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>49236</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/fbbrt/newsAPI/test2.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>maclogair.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.5-stable+timestamp.2014.03.20.22.57.13</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x10b31b1e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x10c68d870&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x1293b7f50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x10b31b1e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x10c68d870&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x1293b7f50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py/applications/fbbrt/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>test2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/Users/logyuan/Documents/web2py/applications/fbbrt/&#x27;, &#x27;/Users/logyuan/Documents/web2py/applications/admin/&#x27;, &#x27;/Users/logyuan/Documents/web2py/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x10c7044d0: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;192.168.2.1&#x27;, &#x27;192.168.4.29&#x27;, &#x27;172.20.10.4&#x27;, &#x27;fe80::40c:ceff:fe3e:b700%bridge0&#x27;, &#x27;fe80::60c:ceff:fee3:df4a%en0&#x27;, &#x27;fe80::34a3:95ff:fec7:ca59%en3&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;maclogair.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Users/logyuan/Documents/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.2.1</div></td></tr><tr><td><div>192.168.4.29</div></td></tr><tr><td><div>172.20.10.4</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::60c:ceff:fee3:df4a%en0</div></td></tr><tr><td><div>fe80::40c:ceff:fe3e:b700%bridge0</div></td></tr><tr><td><div>maclogair.local</div></td></tr><tr><td><div>fe80::34a3:95ff:fec7:ca59%en3</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.5-stable+timestamp.2014.03.20.22.57.13</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 3, 4, 11, 2, 8, 502407)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/fbbrt/newsAPI/test2.html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 3, 4, 3, 2, 8, 502435)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>fbbrt/127.0.0.1.2015-03-04.11-02-08.f6a806a8-2e73-49ab-ab3f-5696f400dc44</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x12bd16950&gt;</div></td></tr></table></div>'
tRp70
sS'frames'
p71
(lp72
(dp73
S'file'
p74
S'/Users/logyuan/Documents/web2py/gluon/restricted.py'
p75
sS'dump'
p76
(dp77
S'code'
p78
S"'# -*- coding: utf-8 -*- \\nimport urllib\\nimport js...omment_count )\\n\\ndef delay():\\n    time.sleep(1.5)\\n'"
p79
sS'layer'
p80
S"'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py'"
p81
sS'global compile2'
p82
S'<function compile2>'
p83
sS'ccode'
p84
S'undefined'
p85
ssS'lnum'
p86
I219
sS'lines'
p87
(dp88
I214
S"    environment['__name__'] = '__restricted__'"
p89
sI215
S'    try:'
p90
sI216
S'        if isinstance(code, types.CodeType):'
p91
sI217
S'            ccode = code'
p92
sI218
S'        else:'
p93
sI219
S'            ccode = compile2(code, layer)'
p94
sI220
S'        exec ccode in environment'
p95
sI221
S'    except HTTP:'
p96
sI222
S'        raise'
p97
sI223
S'    except RestrictedError:'
p98
ssS'call'
p99
S"(code='# -*- coding: utf-8 -*- \\nimport urllib\\nimport js...omment_count )\\n\\ndef delay():\\n    time.sleep(1.5)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer='/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py')"
p100
sS'func'
p101
S'restricted'
p102
sa(dp103
g74
S'/Users/logyuan/Documents/web2py/gluon/restricted.py'
p104
sg76
(dp105
S'builtincompile'
p106
S'<built-in function compile>'
p107
sS'code'
p108
S"'# -*- coding: utf-8 -*- \\nimport urllib\\nimport js...omment_count )\\n\\ndef delay():\\n    time.sleep(1.5)\\n'"
p109
sS'code.rstrip'
p110
S'<built-in method rstrip of str object>'
p111
sS').replace'
p112
g85
sS'layer'
p113
S"'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py'"
p114
ssg86
I202
sg87
(dp115
I197
S''
sI198
S'def compile2(code, layer):'
p116
sI199
S'    """'
p117
sI200
S"    The +'\\n' is necessary else compile fails when code ends in a comment."
p118
sI201
S'    """'
p119
sI202
S"    return compile(code.rstrip().replace('\\r\\n', '\\n') + '\\n', layer, 'exec')"
p120
sI203
S''
sI204
S''
sI205
S"def restricted(code, environment=None, layer='Unknown'):"
p121
sI206
S'    """'
p122
ssg99
S"(code='# -*- coding: utf-8 -*- \\nimport urllib\\nimport js...omment_count )\\n\\ndef delay():\\n    time.sleep(1.5)\\n', layer='/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py')"
p123
sg101
S'compile2'
p124
sasS'pyver'
p125
S'Python 2.7.7: /usr/local/opt/python/bin/python2.7 (prefix: /usr/local/Cellar/python/2.7.7_1/Frameworks/Python.framework/Versions/2.7)'
p126
sS'session'
p127
g69
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp128
sS'etype'
p129
S"<type 'exceptions.SyntaxError'>"
p130
sS'date'
p131
S'Wed Mar  4 11:02:08 2015'
p132
sS'response'
p133
g69
(S's\xb3\x16\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x159198ed8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_fbbrt</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^newsAPI/\\w+\\.py$</div></td></tr><tr><td><div>^newsAPI/test2/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_fbbrt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/Users/logyuan/Documents/web2py/applications/fbbrt/sessions/127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974&#x27;, mode &#x27;rb+&#x27; at 0x15cf00d20&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/Users/logyuan/Documents/web2py/applications/fbbrt/sessions/127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>106f4c22ca06cc343e42b73a0d8492f6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-ba667e6c-8f10-41f3-85e8-d0d158886974</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_fbbrt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>fbbrt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>newsAPI/test2.html</div></td></tr></table></div>'
tRp134
sS'locals'
p135
(dp136
g4
S"'/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py'"
p137
sg6
S"'# -*- coding: utf-8 -*- \\nimport urllib\\nimport js...omment_count )\\n\\ndef delay():\\n    time.sleep(1.5)\\n'"
p138
sssS'traceback'
p139
S'Traceback (most recent call last):\n  File "/Users/logyuan/Documents/web2py/gluon/restricted.py", line 219, in restricted\n    ccode = compile2(code, layer)\n  File "/Users/logyuan/Documents/web2py/gluon/restricted.py", line 202, in compile2\n    return compile(code.rstrip().replace(\'\\r\\n\', \'\\n\') + \'\\n\', layer, \'exec\')\n  File "/Users/logyuan/Documents/web2py/applications/fbbrt/models/graph.py", line 596\n    urls = urls + \',\' + url if len(urls) == 0 else urls = url\nSyntaxError: can\'t assign to conditional expression\n'
p140
s.
{{response.files.append(URL(r=request,c='static',f='/js/d3.v3.min.js'))}}
{{extend 'layout.html'}}
<style>

text {
  font: 12px Hei;
}


</style>




<script>


var diameter = 1280,
    format = d3.format(",d"),
    color = d3.scale.category10();

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("body").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");

d3.json("http://localhost:8088/fsr/static/BestComments.json", function(error, root) {
  var node = svg.selectAll(".node")
      .data(bubble.nodes(classes(root))
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return color(d.packageName); });
      //.style("fill", d3.rgb(100, 200, 100)); 

  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.className.substring(0, d.r / 3); });
});    
    
var diameter2 = 1280,
    format = d3.format(",d"),
    color = d3.scale.category10();

var bubble2 = d3.layout.pack()
    .sort(null)
    .size([diameter2, diameter2])
    .padding(1.5);

var svg2 = d3.select("body").append("svg")
    .attr("width", diameter2)
    .attr("height", diameter2)
    .attr("class", "bubble2");

d3.json("http://localhost:8088/fsr/static/BestComments.json", function(error, root) {
  var node = svg2.selectAll(".node")
      .data(bubble2.nodes(classes(root))
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return color(d.packageName); });
      //.style("fill", d3.rgb(100, 200, 100)); 

  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.className.substring(0, d.r / 3); });    
});

var diameter3 = 1280,
    format = d3.format(",d"),
    color = d3.scale.category20();

var bubble3 = d3.layout.pack()
    .sort(null)
    .size([diameter3, diameter3])
    .padding(1.5);

var svg3 = d3.select("body").append("svg")
    .attr("width", diameter2)
    .attr("height", diameter2)
    .attr("class", "bubble2");

d3.json("http://localhost:8088/fsr/static/BestComments.json", function(error, root) {
  var node = svg3.selectAll(".node")
      .data(bubble3.nodes(classes(root))
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return color(d.packageName); });
      //.style("fill", d3.rgb(100, 200, 100)); 

  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.className.substring(0, d.r / 3); });    
});    
    
    
// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root);
  return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");

</script>
